"PoliceCruiser03DevScene-wEntry" Scene Setup Steps
-----------------------------------------------------------------------------------

Description:

Create a basic Vehicle Controller for your Unity projects using vehicle models
from Synty Polygon City Asset.


Player Controls:
----------------

Player Forward:   W [Keyboard] / Left Stick [Gamepad]
Player Reverse:   S [Keyboard] / Left Stick [Gamepad]
Player Left:      A [Keyboard] / Left Stick [Gamepad]
Player Right:     D [Keyboard] / Left Stick [Gamepad]
Player Jump:      Space [Keyboard] / Button South [Gamepad] 
Player Sprint:    Shift [Keyboard] / Left Shoulder [Gamepad]
Player Look:      Delta [Mouse] / Right Stick [Gamepad]


Vehicle Controls: 
-----------------

Vehicle Forward:   W [Keyboard] / Left Stick [Gamepad]
Vehicle Reverse:   S [Keyboard] / Left Stick [Gamepad]
Vehicle Left:      A [Keyboard] / Left Stick [Gamepad]
Vehicle Right:     D [Keyboard] / Left Stick [Gamepad]
Vehicle Brake:     Space [Keyboard] / Right Trigger [Gamepad]
Enter Vehicle:     E [Keyboard] / Button North [Gamepad] 
Exit Vehicle:      F [Keyboard] / Button South [Gamepad] 



Manual Setup Instruction:
-------------------------

* Simply follow the instruction for manual setup found below.


-----------------------------------------------------------------------------------

Prep Step: Create New Scene Called: "PoliceCruiser03DevScene-wEntry"

Note: if you already have some sort of a test terrain in place, well then, you
can simple skip the steps: #1, 2 & 3 and go directly to #4.

-----------------------------------------------------------------------------------

Step 1: Create: "Environment" * (for Nicer Organization)

-----------------------------------------------------------------------------------


Create Empty: "Environment"

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

First since this is just a "holder" added for better organization, let us go
ahead & drag the "Directional Light" into "Environment".

* also if you wanted you could add a "dir" called Environment and opt to place
  your TerrainData inside that in its own Dir "TerrainData" and as such any
  other Environment stuff respectively in as desired the "Environment" dir.
  Just a suggestion.

Also: We don't need the "Main Camera" in Sample Scene, so..., we can go ahead
and delete it.


-----------------------------------------------------------------------------------

Step 2: Create: "Terrain Plane"

-----------------------------------------------------------------------------------


Create New 3D Object: "Plane"

Position: X: 0   Y: -0.03 Z: 0 
Rotation: X: 0   Y: 0     Z: 0 
Scale:    X: 100 Y: 1     Z: 100

Rename to: "Terrain Plane"

We can now opt to clean up for better organization, simply drag the:
"Terrain Plane" into the holder "Environment" we added for just this exact
 purpose!


-----------------------------------------------------------------------------------

Step 3: Create: "Terrain"

-----------------------------------------------------------------------------------


Create New 3D Object: "Terrain"

Modify via:

"Terrain" Inspector: Terrain Settings

Position: X: -500 Y: 0 Z: -500 
Rotation: X: 0     Y: 0 Z: 0 
Scale:    X: 1     Y: 1 Z: 1

We can now opt to clean up for better organization, simply drag the:
"Terrain" into the holder "Environment" we added for just this exact purpose!


-----------------------------------------------------------------------------------

Step 4: Create: object "Player":

-----------------------------------------------------------------------------------


Create empty object and name such: "Player"

Transform: 
----------

Position: X: 0 Y: 0.9799998 Z: -10 
Rotation: X: 0 Y: 0  Z: 0 
Scale:    X: 1 Y: 1  Z: 1

Add Tag: "Player"


-----------------------------------------------------------------------------------

Step 5: Add: empty object "View":

-----------------------------------------------------------------------------------


In "Player" object, create a child of the "Player" object and name
such: "View"

Transform Position: X: 0 Y: 0 Z: 0


-----------------------------------------------------------------------------------

Step 6: Add: "Camera":

-----------------------------------------------------------------------------------

In "Player" object, add a Camera component as child of "View" and name
such: "Camera"

Transform: 
----------

Position: X: 0 Y: 0.6 Z: 0 
Rotation: X: 0 Y: 0   Z: 0 
Scale:    X: 1 Y: 1   Z: 1

Depth: "1" 

Add Tag: "MainCamera"


-----------------------------------------------------------------------------------

Step 7: Add Component: "First Person Controller (Script)"

-----------------------------------------------------------------------------------


Add: "FirstPersonController.cs" script to object: "Player"


Input Actions:
--------------

Player Controls: PlayerControls (Input Action Asset)


-----------------------------------------------------------------------------------

Step 8: Edit: the "CharacterController" component:

-----------------------------------------------------------------------------------


In "Player" object, edit the "CharacterController" component:

Height: "1.8"


-----------------------------------------------------------------------------------

Step 9: Setup: Audio Source and Footstep Sounds Audio Clips:

-----------------------------------------------------------------------------------

In "Player" object edit: the "First Person Controller (Script)"

Footstep Source: Player (AudioSource)

Footsep Sounds: "4"

Element 0: "Footstep01"
Element 1: "Footstep02"
Element 2: "Footstep03"
Element 3: "Footstep04"


That is it! You should now be able to run around your scene!


But..., for now since we do not need the player controller at this point let
us disable the player object / component in inspector for now until we need it


-----------------------------------------------------------------------------------

Step 10: Create: empty "Interface"

-----------------------------------------------------------------------------------

Create an empty called: "Interface"

Layer: "UI"

Transform: 
----------

Position: X: 0 Y: 0   Z: 0 
Rotation: X: 0 Y: 0   Z: 0 
Scale:    X: 1 Y: 1   Z: 1 


-----------------------------------------------------------------------------------

Step 11: In "Interface" Add UI: "Canvas"

-----------------------------------------------------------------------------------


Create as a child of "Interface" Add a UI: "Canvas"


-----------------------------------------------------------------------------------

Step 12: Create as child of "Canvas" add empty: "VehiclesEntry"

-----------------------------------------------------------------------------------


Create as a child of "Interface" add empty: "VehiclesEntry"

Layer: "UI"


Rect Transform: 
---------------

Set at "Bottom Center"

Position: X: 0 Y: 50   Z: 0 
Width: 100
Height: 100


-----------------------------------------------------------------------------------

Step 13:  Create child of "VehiclesEntry" add Text tmp: "PoliceCruiser03_EntryKey"

-----------------------------------------------------------------------------------

Create as a child of "VehiclesEntry" add TextMeshPro Text: "PoliceCruiser03_EntryKey"

Layer: "UI"


Rect Transform: 
---------------

Set at "Top Center"

Position: X: 0 Y: -50   Z: 0 
Width: 100
Height: 100


Text Input: Drive [E]
Font Size: 36

Alignment: Center & Middle

Face:
-----
Dilate: 0.21

Outline: Yes Thickness: 0.121

Underlay: Yes Softness: 0.522

Note: The face, outline and underlay are merely starting suggestions that you
can tweak further to your desired likings as well as any other related
settings of the likes.

Note: Lastly, disable this object as we do not want this to display prior to
awake or start methods and to do this we will disable this object by default
and then there is a wrapper in the script that will find the inactive item in
start thus doing what will be needed. So yeah, make sure to disable this
object in the editor.

Ok, now that this part is done we can start moving to other setup steps...


-----------------------------------------------------------------------------------

Step 14: Create: empty "Vehicle"

-----------------------------------------------------------------------------------


Now that you disabled the interface, let us go back in your scene heirarchy and...

Create Empty: "Vehicle"

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Notes: Current Summary

-----------------------------------------------------------------------------------


Note: Ok, by now your scene heirarchy at top should look like this:

Environment
Player
Vehicle
Interface
EventSystem

Nice and organized right?! :) Good Stuff! ;)

Note: as this uses a vehicle from such and due to licensing such vehicles
cannot be included in this repository obviously, as such the provided scripts
and instructions thus require having / purchasing the:

Synty Polygon City Asset:

https://assetstore.unity.com/packages/3d/environments/urban/polygon-city-low-poly-3d-art-by-synty-95214


-----------------------------------------------------------------------------------

Step 15: Install: "Synty Polygon City Asset"

-----------------------------------------------------------------------------------


Depending on how you purchased you can either use the package manager to
install the asset or if you are like me and say already have local repository
storage of purchased assets and have the package already you can install the
asset manually.

Asset package to install:

 POLYGON City - Low Poly 3D Art by Synty.unitypackage

Purchase Synty Polygon City Asset:

https://assetstore.unity.com/packages/3d/environments/urban/polygon-city-low-poly-3d-art-by-synty-95214


-----------------------------------------------------------------------------------

Step 16: Identify: the "Vehicle Prefab"

-----------------------------------------------------------------------------------


Let us first identify and locate the "Vehicle Prefab" we are going to use.

Assets > PolygonCity > Prefabs > Vehicles

SM_Veh_Car_Police_01


-----------------------------------------------------------------------------------

Step 17: Add: the "Vehicle Prefab" to Scene

-----------------------------------------------------------------------------------


Drag the mentioned "Vehicle Prefab" into the scene & unpack the prefab completely.

Next, rename the vehicle prefabs:

SM_Veh_Car_Police_01 => "PoliceCruiser03"

Next, set the Transform:

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

Material: PolygonCity_Mat_03_A

Then move "PoliceCruiser03" into the empty: "Vehicle" as child of.


-----------------------------------------------------------------------------------

Step 18: Add: empty "View" as child

-----------------------------------------------------------------------------------


In "PoliceCruiser03" add empty as child named "View"

Set the Transform of "View":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Step 19: Add: "Camera" in empty "View" as child

-----------------------------------------------------------------------------------


In the empty: "View" add "Camera" component named: "PoliceCruiser03Camera"

Tag: Untagged

Depth: 0

Set the Transform of "PoliceCruiser03Camera":

Position: X: 0 Y: 1.4 Z: -6.4 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Step 20: Add: empty "WheelMeshes" as child

-----------------------------------------------------------------------------------


In "PoliceCruiser03" add empty as child named "WheelMeshes"

Set the Transform of "WheelMeshes":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

Copy & paste the following meshes into "WheelMeshes" as children
(delete originals after as they are not needed since we copied them into new
location)

SM_Veh_Car_Police_Wheel_fl
SM_Veh_Car_Police_Wheel_fr
SM_Veh_Car_Police_Wheel_rl
SM_Veh_Car_Police_Wheel_rr

Transforms should be fine and unaffected but, let us just mention them for
good measure.

SM_Veh_Car_Police_Wheel_fl
---------------------------

Position: X: -0.7449768 Y: 0.361439 Z: 1.632266
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_fr
---------------------------

Position: X: 0.7449768 Y: 0.361439 Z: 1.632266 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_rl
---------------------------

Position: X: -0.7449768 Y: 0.361439 Z: -1.24979
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_rr
---------------------------

Position: X: 0.7449768 Y: 0.361439 Z: -1.24979
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Step 21: Duplicate: empty "WheelMeshes" as "WheelColliders"

-----------------------------------------------------------------------------------


In "PoliceCruiser03" duplicate "WheelMeshes" & rename to "WheelColliders"

Set the Transform of "WheelColliders":

Position: X: 0 Y: 0 Z: 0 
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


Since you duplicated "WheelMeshes" & renamed to "WheelColliders" there should
be the children already present with matching infos...

SM_Veh_Car_Police_Wheel_fl
SM_Veh_Car_Police_Wheel_fr
SM_Veh_Car_Police_Wheel_rl
SM_Veh_Car_Police_Wheel_rr


Prior to the deletion of contents in WheelColliders if you desired to
determine the wheel radius so as to eventually use with Wheel Colliders well,
you could attach a Sphere Collider and gain Radius from that and then delete
the sphere collider after as such would no longer be necessary but instead to
avoid needing to do such I will provide that info so you do not necessarily
need to do so.

These details are important:


Front Wheels:
-------------

Front Wheels Collider Radius: 0.361439
Front Wheels Collider Position Y: 0.511439 (0.361439+0.15) *

* Wheel colliders need +0.15 on the Y to function as intended as per
  documentation

Rear Wheels:
------------

Rear Wheels Collider Radius: 0.361439
Rear Wheels Collider Position Y: 0.511439 (0.361439+0.15) *

* Wheel colliders need +0.15 on the Y to function as intended as per
  documentation

In "WheelColliders" children: * (since all are already present in WheelMeshes
and not needed for Wheel Colliders)

* Delete Mesh Filter
* Delete Mesh Renderer

Add Component "Wheel Collider" to each:

SM_Veh_Car_Police_Wheel_fl
SM_Veh_Car_Police_Wheel_fr
SM_Veh_Car_Police_Wheel_rl
SM_Veh_Car_Police_Wheel_rr

Set both front "Wheel Colliders" radius: 0.361439
Set both rear  "Wheel Colliders" radius: 0.361439

We will need to now edit these infos:


SM_Veh_Car_Police_Wheel_fl
---------------------------

Position: X: -0.7449768 Y: 0.511439 Z: 1.632266
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_fr
---------------------------

Position: X: 0.7449768 Y: 0.511439 Z: 1.632266
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_rl
---------------------------

Position: X: -0.7449768 Y: 0.511439 Z: -1.24979
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1

SM_Veh_Car_Police_Wheel_rr
---------------------------

Position: X: 0.7449768 Y: 0.511439 Z: -1.24979
Rotation: X: 0 Y: 0 Z: 0 
Scale:    X: 1 Y: 1 Z: 1


-----------------------------------------------------------------------------------

Notes: Current Summary

-----------------------------------------------------------------------------------


Note: Ok, by now your vehicle heirarchy should look like this:

Mostly Collapsed:

Vehicle
  PoliceCruiser03
    SM_Veh_Car_Police_Glass
    SM_Veh_Car_Police_Plates
    SM_Veh_Car_Police_SteeringW 
    WheelMeshes
    WheelColliders   
    View

Fully Expanded:

Vehicle
  PoliceCruiser03
    SM_Veh_Car_Police_Glass
    SM_Veh_Car_Police_Plates
    SM_Veh_Car_Police_SteeringW
    WheelMeshes
      SM_Veh_Car_Police_Wheel_fl
      SM_Veh_Car_Police_Wheel_fr
      SM_Veh_Car_Police_Wheel_rl
      SM_Veh_Car_Police_Wheel_rr
    WheelColliders
      SM_Veh_Car_Police_Wheel_fl
      SM_Veh_Car_Police_Wheel_fr
      SM_Veh_Car_Police_Wheel_rl
      SM_Veh_Car_Police_Wheel_rr   
    View
      PoliceCruiser03Camera


-----------------------------------------------------------------------------------

Step 22: Add to: PoliceCruiser03 (PoliceCruiser03Controller.cs)

-----------------------------------------------------------------------------------


Attach component / script (PoliceCruiser03Controller.cs) to "PoliceCruiser03"

Adjust the following settings:

Require Components:
-------------------

Rigidbody: PoliceCruiser03 (Rigidbody)

Wheel Transforms:
-----------------

Front Left: SM_Veh_Car_Police_Wheel_fl (Transform)
Front Right: SM_Veh_Car_Police_Wheel_fr (Transform)
Rear Left: SM_Veh_Car_Police_Wheel_rl (Transform)
Rear Right: SM_Veh_Car_Police_Wheel_rr (Transform)

WheelColliders:
---------------

Front Left: SM_Veh_Car_Police_Wheel_fl (Wheel Collider)
Front Right: SM_Veh_Car_Police_Wheel_fr (Wheel Collider)
Rear Left: SM_Veh_Car_Police_Wheel_rl (Wheel Collider)
Rear Right: SM_Veh_Car_Police_Wheel_rr (Wheel Collider)

In Rigidbody:
-------------

Set Rigibody Mass: 2000


Input Actions:
--------------

Car Controls: CarControls (Input Action Asset)


-----------------------------------------------------------------------------------

Step 23: Add to: PoliceCruiser03Camera (PoliceCruiser03Camera.cs)

-----------------------------------------------------------------------------------


Attach component / script (PoliceCruiser03Camera.cs) to "PoliceCruiser03Camera"


Adjust Settings:

Transforms:
-----------

PoliceCruiser03: PoliceCruiser03 (Transform)


You can keep settings as is or tweak them to your likings! *

* ie: (tweak camera height)

Height: 3.16


-----------------------------------------------------------------------------------

Step 24: Add to: PoliceCruiser03 (PoliceCruiser03Entry.cs)

-----------------------------------------------------------------------------------


Attach component / script (PoliceCruiser03Entry.cs) to "PoliceCruiser03"

Adjust the following settings:


Game Objects:
-------------

PoliceCruiser03: PoliceCruiser03
Player: Player
InterfaceText Object: PoliceCruiser03_EntryKey


In Box Collider:
----------------

Is Trigger: Yes

Edit Collider: YES!* 

* Edit the collider to be around the vehicle doors makings sure to extend the
  collider a good bit out away from doors so as to allow for a good trigger
  zone. Here is just an example that I suggest you tweak further to you
  likings and needs:

Center: X: 7.069111e-05 Y: 0.8778306 Z: 0.06783819
Size: X: 4.13833 Y: 1.140519 Z: 1.890623


Input Actions:
--------------

Car Controls: CarControls (Input Action Asset)


-----------------------------------------------------------------------------------

Note: The next step would be to now follow the provided scene with entry
speedometer setup steps.

Lastly, you need to next follow the Player and Vehicle Compass setup steps to
finalize the setup steps!

Ok, hopefully I covered everything. After completion of those steps you should
then be able to run around your scene with your player and then enter / exit
and drive your vehicle around and see your direction by player and vehicle
compass.

-----------------------------------------------------------------------------------


That should about sums it up and should be about it and concludes the basic
Vehicle Controller manual setup steps. You can now begin to modify such
further for your specific needs.

Best of Luck!